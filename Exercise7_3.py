# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
#
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
#
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
#
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
#
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в
# последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек
# в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class OrganicCell:
    def __init__(self, nuclei):
        self.nuclei = nuclei

    def __add__(self, other):
        return OrganicCell(self.nuclei + other.nuclei)

    def __sub__(self, other):
        return OrganicCell(self.nuclei - other.nuclei)

    def __mul__(self, other):
        return OrganicCell(self.nuclei * other.nuclei)

    def __truediv__(self, other):
        return OrganicCell(self.nuclei // other.nuclei)

    def make_order(self, per_array):
        new_line = '\n'
        result = []
        rest_count = self.nuclei
        while rest_count > 0:
            current_count = min(rest_count,per_array)
            result.append('*' * current_count)
            rest_count -= current_count
        return new_line.join(result)

my_cell1 = OrganicCell(34)
my_cell2 = OrganicCell(57)

print('34 + 57 по 14')
print((my_cell1 + my_cell2).make_order(14))

print('57 - 34 по 14')
print((my_cell2 - my_cell1).make_order(14))

print('(57 * 57 * 192) / (34 * 38) по 99')
print(((my_cell2 * my_cell2 * OrganicCell(192)) / (my_cell1 * OrganicCell(38))).make_order(99))